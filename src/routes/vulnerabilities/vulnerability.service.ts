import { EntityService } from '../../shared/interfaces/interfaces'
import { PrismaClient } from "@prisma/client"

const prisma = new PrismaClient()

class VulnerabilityService extends EntityService {
    constructor() {
        super(prisma.vulnerability);
    }


    public add = async (entityData) => {
        try {
            if (entityData.responsable) {
                entityData.responsable = {
                    connect: entityData.responsable
                }
            }

            if (entityData.audit) {
                entityData.audit = {
                    connect: entityData.audit
                }
            }

            if (entityData.asset) {
                entityData.asset = {
                    connect: entityData.asset
                }
            }

            if (entityData.auditor) {
                entityData.auditor = {
                    connect: entityData.auditor
                }
            }

            const entity = await prisma.vulnerability.create({
                data: entityData
            })

            return entity;

        } catch (error) {
            console.log(error)
            throw new Error(error.message)
        }

    }


    public modify = async (id, entityData) => {
        try {
            if (entityData.auditor) {
                entityData.auditor = {
                    connect: entityData.auditor
                }
            } else {
                entityData.auditor = {
                    disconnect: true
                }
            }

            if (entityData.audit) {
                entityData.audit = {
                    connect: entityData.audit
                }
            } else {
                entityData.audit = {
                    disconnect: true
                }
            }

            if (entityData.asset) {
                entityData.asset = {
                    connect: entityData.asset
                }
            } else {
                entityData.asset = {
                    disconnect: true
                }
            }
/*
            if (entityData.cwe) {
                entityData.cwe = {
                    connect: entityData.cwe
                }
            } else {
                entityData.cwe = {
                    disconnect: true
                }
            }*/

            if (entityData.responsable) {
                entityData.responsable = {
                    connect: entityData.responsable
                }
            } else {
                entityData.responsable = {
                    disconnect: true
                }
            }


            const entity = await prisma.vulnerability.update({
                where: { id: id },
                data: entityData
            })
            return entity;



        } catch (error) {
            console.log(error)
            return (error)
        }
    }
}



export default VulnerabilityService;
